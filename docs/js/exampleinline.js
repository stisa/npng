/* Generated by the Nim Compiler v0.15.1 */
/*   (c) 2016 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI31495 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31556 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33353 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31002 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI33375 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33034 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33051 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI33163 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31029 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI32299 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI32667 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI32083 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI32100 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31031 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI31768 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31776 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31754 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31017 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI136 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI31015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI31013 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI116 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI120 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI31020 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3444 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3452 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI37202 = {size: 0,kind: 43,base: null,node: null,finalizer: null};
var NTI37264 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3456 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI12409 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3485 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3436 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
var NNI3436 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3436.node = NNI3436;
NTI3485.base = NTI3424;
var NNI3424 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3485, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3436.base = NTI3424;
NTI3440.base = NTI3436;
var NNI12409 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI12409.node = NNI12409;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3436;
var NNI3456 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3456.node = NNI3456;
NTI3456.base = NTI3424;
NTI37264.base = NTI37202;
var NNI3452 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3452.node = NNI3452;
NTI3452.base = NTI3424;
var NNI3444 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3444.node = NNI3444;
NTI3444.base = NTI3424;
var NNI31020 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "width", len: 0, typ: NTI120, name: "width", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI120, name: "height", sons: null}, 
{kind: 1, offset: "bitdepth", len: 0, typ: NTI116, name: "bit_depth", sons: null}, 
{kind: 1, offset: "colortype", len: 0, typ: NTI116, name: "color_type", sons: null}, 
{kind: 1, offset: "compressiontype", len: 0, typ: NTI116, name: "compression_type", sons: null}, 
{kind: 1, offset: "filtertype", len: 0, typ: NTI116, name: "filter_type", sons: null}, 
{kind: 1, offset: "interlacetype", len: 0, typ: NTI116, name: "interlace_type", sons: null}]};
NTI31020.node = NNI31020;
NTI31015.base = NTI136;
NTI31017.base = NTI136;
var NNI31013 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "bytelen", len: 0, typ: NTI120, name: "bytelen", sons: null}, 
{kind: 1, offset: "typ", len: 0, typ: NTI31015, name: "typ", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI31017, name: "data", sons: null}]};
NTI31013.node = NNI31013;
NTI31013.base = NTI3408;
NTI31020.base = NTI31013;
NTI31754.base = NTI136;
NTI31776.base = NTI136;
NTI31768.base = NTI136;
var NNI31031 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI31031.node = NNI31031;
NTI31031.base = NTI31013;
NTI32083.base = NTI136;
NTI32100.base = NTI32083;
NTI32667.base = NTI136;
NTI32299.base = NTI136;
var NNI31029 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI31029.node = NNI31029;
NTI31029.base = NTI31013;
NTI33163.base = NTI31029;
NTI33051.base = NTI136;
NTI33034.base = NTI136;
NTI33375.base = NTI136;
NTI31002.base = NTI136;
NTI33353.base = NTI136;
NTI31556.base = NTI136;
NTI31495.base = NTI136;
function makeNimstrLit(c_13403) {

    var ln = c_13403.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_13403.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    }
function SetConstr() {

      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    }
function nimCopy(dest_18515, src_18516, ti_18517) {

var result_18829 = null;
switch (ti_18517.kind) {
case 21: case 22: case 23: case 5: if (!(isfatpointer_18498(ti_18517))) {
result_18829 = src_18516;
}
else {
result_18829 = [src_18516[0], src_18516[1]];}


break;
case 19:       if (dest_18515 === null || dest_18515 === undefined) {
        dest_18515 = {};
      }
      else {
        for (var key in dest_18515) { delete dest_18515[key]; }
      }
      for (var key in src_18516) { dest_18515[key] = src_18516[key]; }
      result_18829 = dest_18515;
    
break;
case 18: case 17: if (!((ti_18517.base == null))) {
result_18829 = nimCopy(dest_18515, src_18516, ti_18517.base);
}
else {
if ((ti_18517.kind == 17)) {
result_18829 = (dest_18515 === null || dest_18515 === undefined) ? {m_type: ti_18517} : dest_18515;}
else {
result_18829 = (dest_18515 === null || dest_18515 === undefined) ? {} : dest_18515;}
}
nimCopyAux(result_18829, src_18516, ti_18517.node);

break;
case 24: case 4: case 27: case 16:       if (src_18516 === null) {
        result_18829 = null;
      }
      else {
        if (dest_18515 === null || dest_18515 === undefined) {
          dest_18515 = new Array(src_18516.length);
        }
        else {
          dest_18515.length = src_18516.length;
        }
        result_18829 = dest_18515;
        for (var i = 0; i < src_18516.length; ++i) {
          result_18829[i] = nimCopy(result_18829[i], src_18516[i], ti_18517.base);
        }
      }
    
break;
case 28:       if (src_18516 !== null) {
        result_18829 = src_18516.slice(0);
      }
    
break;
default: 
result_18829 = src_18516;
break;
}
return result_18829;
}
function eqStrings(a_16003, b_16004) {

    if (a_16003 == b_16004) return true;
    if ((!a_16003) || (!b_16004)) return false;
    var alen = a_16003.length;
    if (alen != b_16004.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16003[i] != b_16004[i]) return false;
    return true;
  }
function arrayConstr(len_19003, value_19004, typ_19005) {

      var result = new Array(len_19003);
      for (var i = 0; i < len_19003; ++i) result[i] = nimCopy(null, value_19004, typ_19005);
      return result;
    }
function cstrToNimstr(c_13603) {

  var ln = c_13603.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_13603.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else if((ch > 127) && (ch < 2048)) {
      result[r] = (ch >> 6) | 192;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    else {
      result[r] = (ch >> 12) | 224;
      ++r;
      result[r] = ((ch >> 6) & 63) | 128;
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  }
function toJSStr(s_13803) {

    var len = s_13803.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_13803[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_13803[i] < 128)
        asciiPart[i] = fcc(s_13803[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  }
function raiseException(e_12806, ename_12807) {

e_12806.name = ename_12807;
if ((excHandler == 0)) {
unhandledException(e_12806);
}

e_12806.trace = nimCopy(null, rawwritestacktrace_12628(), NTI138);
throw e_12806;}
function mulInt(a_16603, b_16604) {

      var result = a_16603 * b_16604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function chckRange(i_19015, a_19016, b_19017) {

var Tmp1;
var result_19018 = 0;
BeforeRet: do {
if (!(a_19016 <= i_19015)) Tmp1 = false; else {Tmp1 = (i_19015 <= b_19017); }if (Tmp1) {
result_19018 = i_19015;
break BeforeRet;
}
else {
raiseRangeError();
}

} while (false); 
return result_19018;
}
function chckIndx(i_19009, a_19010, b_19011) {

var Tmp1;
var result_19012 = 0;
BeforeRet: do {
if (!(a_19010 <= i_19009)) Tmp1 = false; else {Tmp1 = (i_19009 <= b_19011); }if (Tmp1) {
result_19012 = i_19009;
break BeforeRet;
}
else {
raiseIndexError();
}

} while (false); 
return result_19012;
}
function addInt(a_16256, b_16257) {

      var result = a_16256 + b_16257;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function divInt(a_16803, b_16804) {

      if (b_16804 == 0) raiseDivByZero();
      if (b_16804 == -1 && a_16803 == 2147483647) raiseOverflow();
      return Math.floor(a_16803 / b_16804);
    }
function subInt(a_16403, b_16404) {

      var result = a_16403 - b_16404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    }
function mnewString(len_14003) {

      var result = new Array(len_14003+1);
      result[0] = 0;
      result[len_14003] = 0;
      return result;
    }
var Header_31001 = nimCopy(null, [137, 80, 78, 71, 13, 10, 26, 10], NTI31002);
var nimvm_5554 = false;
var nim_program_result = 0;
var globalraisehook_10414 = [null];
var localraisehook_10419 = [null];
var outofmemhook_10422 = [null];
function isfatpointer_18498(ti_18500) {

var result_18501 = false;
BeforeRet: do {
result_18501 = !((SetConstr(17, 16, 4, 18, 27, 19, 23, 22, 21)[ti_18500.base.kind] != undefined));
break BeforeRet;
} while (false); 
return result_18501;
}
function nimCopyAux(dest_18520, src_18521, n_18523) {

switch (n_18523.kind) {
case 0: 
break;
case 1:       dest_18520[n_18523.offset] = nimCopy(dest_18520[n_18523.offset], src_18521[n_18523.offset], n_18523.typ);
    
break;
case 2: L1: do {
var i_18815 = 0;
var HEX3Atmp_18817 = 0;
HEX3Atmp_18817 = (n_18523.len - 1);
var res_18820 = 0;
L2: do {
L3: while (true) {
if (!(res_18820 <= HEX3Atmp_18817)) break L3;
i_18815 = res_18820;
nimCopyAux(dest_18520, src_18521, n_18523.sons[i_18815]);
res_18820 += 1;
}
} while(false);
} while(false);

break;
case 3:       dest_18520[n_18523.offset] = nimCopy(dest_18520[n_18523.offset], src_18521[n_18523.offset], n_18523.typ);
      for (var i = 0; i < n_18523.sons.length; ++i) {
        nimCopyAux(dest_18520, src_18521, n_18523.sons[i][1]);
      }
    
break;
}
}
function add_10438(x_10441, x_10441_Idx, y_10442) {

        var len = x_10441[0].length-1;
        for (var i = 0; i < y_10442.length; ++i) {
          x_10441[0][len] = y_10442.charCodeAt(i);
          ++len;
        }
        x_10441[0][len] = 0
      }
function auxwritestacktrace_12404(f_12406) {

var Tmp3;
var result_12407 = [null];
var it_12415 = f_12406;
var i_12416 = 0;
var total_12417 = 0;
var tempframes_12421 = arrayConstr(64, {Field0: null, Field1: 0}, NTI12409);
L1: do {
L2: while (true) {
if (!!((it_12415 == null))) Tmp3 = false; else {Tmp3 = (i_12416 <= 63); }if (!Tmp3) break L2;
tempframes_12421[i_12416].Field0 = it_12415.procname;
tempframes_12421[i_12416].Field1 = it_12415.line;
i_12416 += 1;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
L4: do {
L5: while (true) {
if (!!((it_12415 == null))) break L5;
total_12417 += 1;
it_12415 = it_12415.prev;
}
} while(false);
result_12407[0] = nimCopy(null, makeNimstrLit(""), NTI138);
if (!((total_12417 == i_12416))) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_12407[0] = makeNimstrLit("(");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr(((total_12417 - i_12416))+"")); } else { result_12407[0] = cstrToNimstr(((total_12417 - i_12416))+"");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_12407[0] = makeNimstrLit(" calls omitted) ...\x0A");};
}

L6: do {
var j_12615 = 0;
var HEX3Atmp_12621 = 0;
HEX3Atmp_12621 = (i_12416 - 1);
var res_12624 = HEX3Atmp_12621;
L7: do {
L8: while (true) {
if (!(0 <= res_12624)) break L8;
j_12615 = res_12624;
add_10438(result_12407, 0, tempframes_12421[j_12615].Field0);
if ((0 < tempframes_12421[j_12615].Field1)) {
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_12407[0] = makeNimstrLit(", line: ");};
if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(cstrToNimstr((tempframes_12421[j_12615].Field1)+"")); } else { result_12407[0] = cstrToNimstr((tempframes_12421[j_12615].Field1)+"");};
}

if (result_12407[0] != null) { result_12407[0] = (result_12407[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_12407[0] = makeNimstrLit("\x0A");};
res_12624 -= 1;
}
} while(false);
} while(false);
return result_12407[0];
}
function rawwritestacktrace_12628() {

var result_12630 = null;
if (!((framePtr == null))) {
result_12630 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxwritestacktrace_12404(framePtr)), NTI138);
}
else {
result_12630 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
}

return result_12630;
}
function unhandledException(e_12654) {

var Tmp1;
var buf_12655 = /**/[makeNimstrLit("")];
if (!!(eqStrings(e_12654.message, null))) Tmp1 = false; else {Tmp1 = !((e_12654.message[0] == 0)); }if (Tmp1) {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception: ");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(e_12654.message); } else { buf_12655[0] = e_12654.message;};
}
else {
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_12655[0] = makeNimstrLit("Error: unhandled exception");};
}

if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_12655[0] = makeNimstrLit(" [");};
add_10438(buf_12655, 0, e_12654.name);
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_12655[0] = makeNimstrLit("]\x0A");};
if (buf_12655[0] != null) { buf_12655[0] = (buf_12655[0].slice(0, -1)).concat(rawwritestacktrace_12628()); } else { buf_12655[0] = rawwritestacktrace_12628();};
var cbuf_12801 = toJSStr(buf_12655[0]);
framePtr = null;
  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_12801);
  }
  else {
    throw cbuf_12801;
  }
  }
function raiseOverflow() {

var e_13236 = null;
e_13236 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null};
e_13236.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
raiseException(e_13236, "OverflowError");
}
function raiseDivByZero() {

var e_13252 = null;
e_13252 = {m_type: NTI3438, parent: null, name: null, message: null, trace: null};
e_13252.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
raiseException(e_13252, "DivByZeroError");
}
function newseq_37259(len_37263) {

var result_37265 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
result_37265 = new Array(len_37263); for (var i=0;i<len_37263;++i) {result_37265[i]=0;}framePtr = F.prev;
return result_37265;
}
function raiseRangeError() {

var e_13268 = null;
e_13268 = {m_type: NTI3456, parent: null, name: null, message: null, trace: null};
e_13268.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
raiseException(e_13268, "RangeError");
}
function initpng_37241(w_37243, h_37244) {

var result_37245 = {w: 0, h: 0, pixels: null};
var F={procname:"npng.initPNG",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\npng.nim",line:0};
framePtr = F;
F.line = 49;
result_37245.w = w_37243;
F.line = 50;
result_37245.h = h_37244;
F.line = 51;
result_37245.pixels = nimCopy(null, newseq_37259(chckRange(mulInt(w_37243, h_37244), 0, 2147483647)), NTI37264);
framePtr = F.prev;
return result_37245;
}
var png_39003 = /**/[initpng_37241(300, 300)];
function raiseIndexError() {

var e_13284 = null;
e_13284 = {m_type: NTI3452, parent: null, name: null, message: null, trace: null};
e_13284.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
raiseException(e_13284, "IndexError");
}
function sysfatal_20821(message_20827) {

var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
F.line = 2543;
var e_20829 = null;
e_20829 = {m_type: NTI3444, parent: null, name: null, message: null, trace: null};
F.line = 2545;
e_20829.message = nimCopy(null, message_20827, NTI138);
F.line = 2546;
raiseException(e_20829, "AssertionError");
framePtr = F.prev;
}
function raiseassert_20816(msg_20818) {

var F={procname:"system.raiseAssert",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
sysfatal_20821(msg_20818);
framePtr = F.prev;
}
function failedassertimpl_20839(msg_20841) {

var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
raiseassert_20816(msg_20841);
framePtr = F.prev;
}
function fillwith_37551(png_37554, color_37555) {

var F={procname:"npng.fillWith",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\npng.nim",line:0};
framePtr = F;
L1: do {
F.line = 65;
var p_37603 = [null, 0];
var p_37603_Idx = 0;
F.line = 3449;
var i_37607 = 0;
F.line = 3450;
var L_37609 = (png_37554.pixels != null ? png_37554.pixels.length : 0);
L2: do {
F.line = 3451;
L3: while (true) {
if (!(i_37607 < L_37609)) break L3;
F.line = 3452;
p_37603 = png_37554.pixels; p_37603_Idx = chckIndx(i_37607, 0, png_37554.pixels.length)-0;
F.line = 65;
p_37603[p_37603_Idx] = color_37555;
i_37607 = addInt(i_37607, 1);
if (!(((png_37554.pixels != null ? png_37554.pixels.length : 0) == L_37609))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
framePtr = F.prev;
}
fillwith_37551(png_39003[0], 16711935);
function encode_37622(s_37627, linelen_37629, newline_37631) {

var Tmp3;
var result_37632 = null;
var F={procname:"encode.encode",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\pure\\base64.nim",line:0};
framePtr = F;
F.line = 50;
var total_37634 = mulInt(divInt(addInt((s_37627 != null ? s_37627.length : 0), 2), 3), 4);
F.line = 51;
var numlines_37636 = divInt(subInt(addInt(total_37634, linelen_37629), 1), linelen_37629);
if ((0 < numlines_37636)) {
total_37634 = addInt(total_37634, mulInt(subInt(numlines_37636, 1), (newline_37631 != null ? newline_37631.length-1 : 0)));
}

F.line = 54;
result_37632 = nimCopy(null, mnewString(chckRange(total_37634, 0, 2147483647)), NTI138);
F.line = 55;
var i_37638 = 0;
F.line = 56;
var r_37640 = 0;
F.line = 57;
var currline_37642 = 0;
L1: do {
F.line = 58;
L2: while (true) {
if (!(i_37638 < subInt((s_37627 != null ? s_37627.length : 0), 2))) break L2;
F.line = 59;
var a_37644 = s_37627[chckIndx(i_37638, 0, s_37627.length)-0];
F.line = 60;
var b_37646 = s_37627[chckIndx(addInt(i_37638, 1), 0, s_37627.length)-0];
F.line = 61;
var c_37648 = s_37627[chckIndx(addInt(i_37638, 2), 0, s_37627.length)-0];
F.line = 62;
result_37632[chckIndx(r_37640, 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx(((a_37644 >>> 0) >>> 2), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 63;
result_37632[chckIndx(addInt(r_37640, 1), 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((a_37644 & 3) << 4) | (((b_37646 & 240) >>> 0) >>> 4)), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 64;
result_37632[chckIndx(addInt(r_37640, 2), 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((b_37646 & 15) << 2) | (((c_37648 & 192) >>> 0) >>> 6)), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 65;
result_37632[chckIndx(addInt(r_37640, 3), 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((c_37648 & 63), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
r_37640 = addInt(r_37640, 4);
i_37638 = addInt(i_37638, 3);
currline_37642 = addInt(currline_37642, 4);
if (!(linelen_37629 <= currline_37642)) Tmp3 = false; else {Tmp3 = !((i_37638 == subInt((s_37627 != null ? s_37627.length : 0), 2))); }if (Tmp3) {
L4: do {
F.line = 70;
var x_37650 = 0;
F.line = 3458;
var i_37799 = 0;
F.line = 3459;
var L_37801 = (newline_37631 != null ? newline_37631.length-1 : 0);
L5: do {
F.line = 3460;
L6: while (true) {
if (!(i_37799 < L_37801)) break L6;
F.line = 3461;
x_37650 = newline_37631[chckIndx(i_37799, 0, newline_37631.length)-0];
F.line = 71;
result_37632[chckIndx(r_37640, 0, result_37632.length)-0] = x_37650;
r_37640 = addInt(r_37640, 1);
i_37799 = addInt(i_37799, 1);
if (!(((newline_37631 != null ? newline_37631.length-1 : 0) == L_37801))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L string modified while iterating over it"));
}

}
} while(false);
} while(false);
F.line = 73;
currline_37642 = 0;
}

}
} while(false);
if ((i_37638 < subInt((s_37627 != null ? s_37627.length : 0), 1))) {
F.line = 76;
var a_37652 = s_37627[chckIndx(i_37638, 0, s_37627.length)-0];
F.line = 77;
var b_37654 = s_37627[chckIndx(addInt(i_37638, 1), 0, s_37627.length)-0];
F.line = 78;
result_37632[chckIndx(r_37640, 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx(((a_37652 >>> 0) >>> 2), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 79;
result_37632[chckIndx(addInt(r_37640, 1), 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx((((a_37652 & 3) << 4) | (((b_37654 & 240) >>> 0) >>> 4)), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 80;
result_37632[chckIndx(addInt(r_37640, 2), 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx(((b_37654 & 15) << 2), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 81;
result_37632[chckIndx(addInt(r_37640, 3), 0, result_37632.length)-0] = 61;
if (!((addInt(r_37640, 4) == (result_37632 != null ? result_37632.length-1 : 0)))) {
result_37632.length = chckRange(addInt(r_37640, 4), 0, 2147483647)+1; result_37632[result_37632.length-1] = 0;
}

}
else {
if ((i_37638 < (s_37627 != null ? s_37627.length : 0))) {
F.line = 85;
var a_37656 = s_37627[chckIndx(i_37638, 0, s_37627.length)-0];
F.line = 86;
result_37632[chckIndx(r_37640, 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx(((a_37656 >>> 0) >>> 2), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 87;
result_37632[chckIndx(addInt(r_37640, 1), 0, result_37632.length)-0] = makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")[chckIndx(((a_37656 & 3) << 4), 0, makeNimstrLit("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/").length)-0];
F.line = 88;
result_37632[chckIndx(addInt(r_37640, 2), 0, result_37632.length)-0] = 61;
F.line = 89;
result_37632[chckIndx(addInt(r_37640, 3), 0, result_37632.length)-0] = 61;
if (!((addInt(r_37640, 4) == (result_37632 != null ? result_37632.length-1 : 0)))) {
result_37632.length = chckRange(addInt(r_37640, 4), 0, 2147483647)+1; result_37632[result_37632.length-1] = 0;
}

}
else {
if (!((r_37640 == (result_37632 != null ? result_37632.length-1 : 0)))) {
result_37632.length = chckRange(r_37640, 0, 2147483647)+1; result_37632[result_37632.length-1] = 0;
}

}
}
framePtr = F.prev;
return result_37632;
}
function newseq_31771(len_31775) {

var result_31777 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
result_31777 = new Array(len_31775); for (var i=0;i<len_31775;++i) {result_31777[i]=0;}framePtr = F.prev;
return result_31777;
}
function HEX26_31759(ar_31764, ar2_31767) {

var result_31769 = null;
var F={procname:"&.&",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 58;
result_31769 = nimCopy(null, newseq_31771(0), NTI31776);
L1: do {
F.line = 59;
var a_31795 = 0;
F.line = 1978;
var i_32007 = 0;
L2: do {
F.line = 1979;
L3: while (true) {
if (!(i_32007 < (ar_31764 != null ? ar_31764.length : 0))) break L3;
F.line = 1980;
a_31795 = ar_31764[chckIndx(i_32007, 0, ar_31764.length)-0];
if (result_31769 != null) { result_31769.push(a_31795); } else { result_31769 = [a_31795]; };
i_32007 = addInt(i_32007, 1);
}
} while(false);
} while(false);
L4: do {
F.line = 60;
var a_31813 = 0;
F.line = 1978;
var i_32011 = 0;
L5: do {
F.line = 1979;
L6: while (true) {
if (!(i_32011 < (ar2_31767 != null ? ar2_31767.length : 0))) break L6;
F.line = 1980;
a_31813 = ar2_31767[chckIndx(i_32011, 0, ar2_31767.length)-0];
if (result_31769 != null) { result_31769.push(a_31813); } else { result_31769 = [a_31813]; };
i_32011 = addInt(i_32011, 1);
}
} while(false);
} while(false);
if (!((addInt((ar_31764 != null ? ar_31764.length : 0), (ar2_31767 != null ? ar2_31767.length : 0)) == (result_31769 != null ? result_31769.length : 0)))) {
failedassertimpl_20839(makeNimstrLit("len(ar) + len(ar2) == len(result) "));
}

framePtr = F.prev;
return result_31769;
}
function charsof_31337(b4_31339) {

var result_31342 = [0, 0, 0, 0];
var F={procname:"impl.charsOf",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 71;
result_31342[0] = (((b4_31339 >>> 0) >>> 24) & 0xff);
F.line = 72;
result_31342[1] = (((b4_31339 >>> 0) >>> 16) & 0xff);
F.line = 73;
result_31342[2] = (((b4_31339 >>> 0) >>> 8) & 0xff);
F.line = 74;
result_31342[3] = (((b4_31339 >>> 0) >>> 0) & 0xff);
framePtr = F.prev;
return result_31342;
}
function initihdr_31731(w_31733, h_31734, bitdepth_31735, ctype_31737, comptype_31738, ftype_31739, itype_31740) {

var result_31741 = {m_type: NTI31020, width: 0, height: 0, bitdepth: 0, colortype: 0, compressiontype: 0, filtertype: 0, interlacetype: 0, bytelen: 0, typ: null, data: null};
var F={procname:"impl.initIHDR",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 96;
result_31741.width = chckRange(w_31733, 0, 4294967295);
F.line = 97;
result_31741.height = chckRange(h_31734, 0, 4294967295);
F.line = 98;
result_31741.bitdepth = (bitdepth_31735 & 0xff);
F.line = 99;
result_31741.colortype = (ctype_31737 & 0xff);
F.line = 100;
result_31741.compressiontype = (comptype_31738 & 0xff);
F.line = 101;
result_31741.filtertype = (ftype_31739 & 0xff);
F.line = 102;
result_31741.interlacetype = (itype_31740 & 0xff);
F.line = 104;
result_31741.bytelen = 13;
F.line = 105;
result_31741.typ = nimCopy(null, [73, 72, 68, 82], NTI31754);
F.line = 106;
result_31741.data = nimCopy(null, HEX26_31759(charsof_31337(result_31741.width), charsof_31337(result_31741.height)), NTI31768);
if (result_31741.data != null) { result_31741.data.push(result_31741.bitdepth); } else { result_31741.data = [result_31741.bitdepth]; };
if (result_31741.data != null) { result_31741.data.push(result_31741.colortype); } else { result_31741.data = [result_31741.colortype]; };
if (result_31741.data != null) { result_31741.data.push(result_31741.compressiontype); } else { result_31741.data = [result_31741.compressiontype]; };
if (result_31741.data != null) { result_31741.data.push(result_31741.filtertype); } else { result_31741.data = [result_31741.filtertype]; };
if (result_31741.data != null) { result_31741.data.push(result_31741.interlacetype); } else { result_31741.data = [result_31741.interlacetype]; };
framePtr = F.prev;
return result_31741;
}
function initiend_33331() {

var result_33333 = {m_type: NTI31031, bytelen: 0, typ: null, data: null};
var F={procname:"impl.initIEND",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 212;
result_33333.bytelen = 0;
F.line = 213;
result_33333.typ = nimCopy(null, [73, 69, 78, 68], NTI31754);
framePtr = F.prev;
return result_33333;
}
function newseq_32095(len_32099) {

var result_32101 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
result_32101 = new Array(len_32099); for (var i=0;i<len_32099;++i) {result_32101[i]=null;}framePtr = F.prev;
return result_32101;
}
function add_31560(x_31566, x_31566_Idx, y_31569) {

var F={procname:"add.add",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
F.line = 1399;
var xl_31578 = (x_31566[x_31566_Idx] != null ? x_31566[x_31566_Idx].length : 0);
x_31566[x_31566_Idx].length = chckRange(addInt(xl_31578, (y_31569 != null ? y_31569.length : 0)), 0, 2147483647);
L1: do {
F.line = 1401;
var i_31605 = 0;
F.line = 1905;
var HEX3Atmp_31607 = 0;
F.line = 1401;
HEX3Atmp_31607 = (y_31569 != null ? (y_31569.length-1) : -1);
F.line = 1887;
var res_31610 = 0;
L2: do {
F.line = 1888;
L3: while (true) {
if (!(res_31610 <= HEX3Atmp_31607)) break L3;
F.line = 1889;
i_31605 = res_31610;
F.line = 1401;
x_31566[x_31566_Idx][chckIndx(addInt(xl_31578, i_31605), 0, x_31566[x_31566_Idx].length)-0] = y_31569[chckIndx(i_31605, 0, y_31569.length)-0];
res_31610 = addInt(res_31610, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function expand_32072(pixels_32075, w_32076, h_32077) {

var result_32080 = [null];
var F={procname:"impl.expand",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 117;
result_32080[0] = nimCopy(null, newseq_32095(chckRange(h_32077, 0, 2147483647)), NTI32100);
F.line = 119;
var offset_32120 = 0;
L1: do {
F.line = 120;
var yline_32206 = [null, 0];
var yline_32206_Idx = 0;
F.line = 3449;
var i_32274 = 0;
F.line = 3450;
var L_32276 = (result_32080[0] != null ? result_32080[0].length : 0);
L2: do {
F.line = 3451;
L3: while (true) {
if (!(i_32274 < L_32276)) break L3;
F.line = 3452;
yline_32206 = result_32080[0]; yline_32206_Idx = chckIndx(i_32274, 0, result_32080[0].length)-0;
F.line = 121;
yline_32206[yline_32206_Idx] = nimCopy(null, newseq_31771(0), NTI31776);
L4: do {
F.line = 122;
var xc_32244 = 0;
F.line = 3632;
var i_32270 = 0;
L5: do {
F.line = 3633;
L6: while (true) {
if (!(i_32270 < w_32076)) break L6;
F.line = 3632;
xc_32244 = i_32270;
add_31560(yline_32206, yline_32206_Idx, charsof_31337(pixels_32075[chckIndx(addInt(offset_32120, xc_32244), 0, pixels_32075.length)-0]));
i_32270 = addInt(i_32270, 1);
}
} while(false);
} while(false);
offset_32120 = addInt(offset_32120, w_32076);
i_32274 = addInt(i_32274, 1);
if (!(((result_32080[0] != null ? result_32080[0].length : 0) == L_32276))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
framePtr = F.prev;
return result_32080[0];
}
function HEX26_32659(x_32663, y_32666) {

var result_32668 = null;
var F={procname:"&.&",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
result_32668 = new Array(chckRange(addInt((y_32666 != null ? y_32666.length : 0), 1), 0, 2147483647)); for (var i=0;i<chckRange(addInt((y_32666 != null ? y_32666.length : 0), 1), 0, 2147483647);++i) {result_32668[i]=0;}F.line = 2175;
result_32668[0] = x_32663;
L1: do {
F.line = 2176;
var i_32704 = 0;
F.line = 1905;
var HEX3Atmp_32706 = 0;
F.line = 2176;
HEX3Atmp_32706 = subInt((y_32666 != null ? y_32666.length : 0), 1);
F.line = 1887;
var res_32709 = 0;
L2: do {
F.line = 1888;
L3: while (true) {
if (!(res_32709 <= HEX3Atmp_32706)) break L3;
F.line = 1889;
i_32704 = res_32709;
F.line = 2177;
result_32668[chckIndx(addInt(i_32704, 1), 0, result_32668.length)-0] = y_32666[chckIndx(i_32704, 0, y_32666.length)-0];
res_32709 = addInt(res_32709, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
return result_32668;
}
function HEX5BHEX5D_32746(s_32751, x_32754) {

var result_32756 = null;
var F={procname:"[].[]",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
F.line = 3264;
var a_32757 = x_32754.a;
F.line = 3265;
var L_32758 = addInt(subInt(x_32754.b, a_32757), 1);
result_32756 = new Array(chckRange(L_32758, 0, 2147483647)); for (var i=0;i<chckRange(L_32758, 0, 2147483647);++i) {result_32756[i]=0;}L1: do {
F.line = 3267;
var i_32786 = 0;
F.line = 1905;
var HEX3Atmp_32788 = 0;
F.line = 3267;
HEX3Atmp_32788 = subInt(L_32758, 1);
F.line = 1887;
var res_32791 = 0;
L2: do {
F.line = 1888;
L3: while (true) {
if (!(res_32791 <= HEX3Atmp_32788)) break L3;
F.line = 1889;
i_32786 = res_32791;
F.line = 3267;
result_32756[chckIndx(i_32786, 0, result_32756.length)-0] = s_32751[chckIndx(addInt(i_32786, a_32757), 0, s_32751.length)-0];
res_32791 = addInt(res_32791, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
return result_32756;
}
function HEX2EHEX2E_32736(a_32740, b_32742) {

var result_32744 = {a: 0, b: 0};
var F={procname:".....",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
F.line = 274;
result_32744.a = a_32740;
F.line = 275;
result_32744.b = b_32742;
framePtr = F.prev;
return result_32744;
}
function applyfilter_32628(pixbytes_32633, pixbytes_32633_Idx, filter_32635) {

var F={procname:"impl.applyFilter",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
if ((filter_32635 == 0)) {
L1: do {
F.line = 134;
var ln_32657 = [null, 0];
var ln_32657_Idx = 0;
F.line = 3449;
var i_32924 = 0;
F.line = 3450;
var L_32926 = (pixbytes_32633[pixbytes_32633_Idx] != null ? pixbytes_32633[pixbytes_32633_Idx].length : 0);
L2: do {
F.line = 3451;
L3: while (true) {
if (!(i_32924 < L_32926)) break L3;
F.line = 3452;
ln_32657 = pixbytes_32633[pixbytes_32633_Idx]; ln_32657_Idx = chckIndx(i_32924, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0;
F.line = 135;
ln_32657[ln_32657_Idx] = nimCopy(null, HEX26_32659(0, ln_32657[ln_32657_Idx]), NTI32667);
i_32924 = addInt(i_32924, 1);
if (!(((pixbytes_32633[pixbytes_32633_Idx] != null ? pixbytes_32633[pixbytes_32633_Idx].length : 0) == L_32926))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
}
else {
if ((filter_32635 == 1)) {
L4: do {
F.line = 137;
var ln_32734 = [null, 0];
var ln_32734_Idx = 0;
F.line = 3449;
var i_32939 = 0;
F.line = 3450;
var L_32941 = (pixbytes_32633[pixbytes_32633_Idx] != null ? pixbytes_32633[pixbytes_32633_Idx].length : 0);
L5: do {
F.line = 3451;
L6: while (true) {
if (!(i_32939 < L_32941)) break L6;
F.line = 3452;
ln_32734 = pixbytes_32633[pixbytes_32633_Idx]; ln_32734_Idx = chckIndx(i_32939, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0;
F.line = 138;
var tmp_32795 = HEX5BHEX5D_32746(ln_32734[ln_32734_Idx], HEX2EHEX2E_32736(0, 3));
L7: do {
F.line = 139;
var i_32813 = 0;
F.line = 3631;
var HEX3Atmp_32932 = 0;
F.line = 139;
HEX3Atmp_32932 = (ln_32734[ln_32734_Idx] != null ? ln_32734[ln_32734_Idx].length : 0);
F.line = 3632;
var i_32935 = 4;
L8: do {
F.line = 3633;
L9: while (true) {
if (!(i_32935 < HEX3Atmp_32932)) break L9;
F.line = 3632;
i_32813 = i_32935;
if (tmp_32795 != null) { tmp_32795.push(((ln_32734[ln_32734_Idx][chckIndx(i_32813, 0, ln_32734[ln_32734_Idx].length)-0] - ln_32734[ln_32734_Idx][chckIndx(subInt(i_32813, 4), 0, ln_32734[ln_32734_Idx].length)-0]) & 0xff)); } else { tmp_32795 = [((ln_32734[ln_32734_Idx][chckIndx(i_32813, 0, ln_32734[ln_32734_Idx].length)-0] - ln_32734[ln_32734_Idx][chckIndx(subInt(i_32813, 4), 0, ln_32734[ln_32734_Idx].length)-0]) & 0xff)]; };
i_32935 = addInt(i_32935, 1);
}
} while(false);
} while(false);
F.line = 141;
ln_32734[ln_32734_Idx] = nimCopy(null, HEX26_32659(1, tmp_32795), NTI32667);
i_32939 = addInt(i_32939, 1);
if (!(((pixbytes_32633[pixbytes_32633_Idx] != null ? pixbytes_32633[pixbytes_32633_Idx].length : 0) == L_32941))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
}
else {
if ((filter_32635 == 2)) {
L10: do {
F.line = 144;
var j_32871 = 0;
F.line = 3631;
var HEX3Atmp_32953 = 0;
F.line = 144;
HEX3Atmp_32953 = (pixbytes_32633[pixbytes_32633_Idx] != null ? pixbytes_32633[pixbytes_32633_Idx].length : 0);
F.line = 3632;
var i_32956 = 0;
L11: do {
F.line = 3633;
L12: while (true) {
if (!(i_32956 < HEX3Atmp_32953)) break L12;
F.line = 3632;
j_32871 = i_32956;
L13: do {
F.line = 145;
var i_32889 = 0;
F.line = 3631;
var HEX3Atmp_32948 = 0;
F.line = 145;
HEX3Atmp_32948 = (pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0] != null ? pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0].length : 0);
F.line = 3632;
var i_32951 = 0;
L14: do {
F.line = 3633;
L15: while (true) {
if (!(i_32951 < HEX3Atmp_32948)) break L15;
F.line = 3632;
i_32889 = i_32951;
L16: do {
if ((j_32871 == 0)) {
F.line = 146;
break L16;
}

F.line = 147;
pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0][chckIndx(i_32889, 0, pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0].length)-0] = ((pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0][chckIndx(i_32889, 0, pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0].length)-0] - pixbytes_32633[pixbytes_32633_Idx][chckIndx(subInt(j_32871, 1), 0, pixbytes_32633[pixbytes_32633_Idx].length)-0][chckIndx(i_32889, 0, pixbytes_32633[pixbytes_32633_Idx][chckIndx(subInt(j_32871, 1), 0, pixbytes_32633[pixbytes_32633_Idx].length)-0].length)-0]) & 0xff);
} while(false);
i_32951 = addInt(i_32951, 1);
}
} while(false);
} while(false);
if ((j_32871 == 0)) {
F.line = 148;
pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0] = nimCopy(null, HEX26_32659(0, pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0]), NTI32667);
}
else {
F.line = 149;
pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0] = nimCopy(null, HEX26_32659(2, pixbytes_32633[pixbytes_32633_Idx][chckIndx(j_32871, 0, pixbytes_32633[pixbytes_32633_Idx].length)-0]), NTI32667);
}

i_32956 = addInt(i_32956, 1);
}
} while(false);
} while(false);
}
}}
framePtr = F.prev;
}
function flatten_32277(pixbytes_32281) {

var result_32283 = null;
var F={procname:"impl.flatten",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 128;
result_32283 = nimCopy(null, [], NTI32299);
L1: do {
F.line = 129;
var y_32405 = null;
F.line = 3440;
var i_32625 = 0;
F.line = 3441;
var L_32627 = (pixbytes_32281 != null ? pixbytes_32281.length : 0);
L2: do {
F.line = 3442;
L3: while (true) {
if (!(i_32625 < L_32627)) break L3;
F.line = 3443;
y_32405 = pixbytes_32281[chckIndx(i_32625, 0, pixbytes_32281.length)-0];
L4: do {
F.line = 130;
var x_32605 = 0;
F.line = 3440;
var i_32620 = 0;
F.line = 3441;
var L_32622 = (y_32405 != null ? y_32405.length : 0);
L5: do {
F.line = 3442;
L6: while (true) {
if (!(i_32620 < L_32622)) break L6;
F.line = 3443;
x_32605 = y_32405[chckIndx(i_32620, 0, y_32405.length)-0];
if (result_32283 != null) { result_32283.push(x_32605); } else { result_32283 = [x_32605]; };
i_32620 = addInt(i_32620, 1);
if (!(((y_32405 != null ? y_32405.length : 0) == L_32622))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
i_32625 = addInt(i_32625, 1);
if (!(((pixbytes_32281 != null ? pixbytes_32281.length : 0) == L_32627))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
framePtr = F.prev;
return result_32283;
}
function HEX2F_20007(x_20009, y_20010) {

var result_20011 = 0.0;
var F={procname:"system./",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
F.line = 3189;
result_20011 = (x_20009 / y_20010);
framePtr = F.prev;
return result_20011;
}
function newseq_33158(len_33162) {

var result_33164 = null;
var F={procname:"newSeq.newSeq",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
result_33164 = new Array(len_33162); for (var i=0;i<len_33162;++i) {result_33164[i]={m_type: NTI31029, bytelen: 0, typ: null, data: null};}framePtr = F.prev;
return result_33164;
}
function charsofandcompl_32958(b2_32960) {

var result_32963 = [0, 0, 0, 0];
var F={procname:"impl.charsOfAndCompl",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 154;
result_32963[0] = (((b2_32960 & 0xffff) >>> 0) & 0xff);
F.line = 155;
result_32963[1] = (((b2_32960 & 0xffff) >>> 8) & 0xff);
F.line = 156;
result_32963[2] = ((((b2_32960 ^ 65535) & 0xffff) >>> 0) & 0xff);
F.line = 157;
result_32963[3] = ((((b2_32960 ^ 65535) & 0xffff) >>> 8) & 0xff);
framePtr = F.prev;
return result_32963;
}
function compress_33028(pixbytes_33031, isfirst_33032, islast_33033) {

var result_33035 = [null];
var F={procname:"impl.compress",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 166;
result_33035[0] = nimCopy(null, [], NTI33051);
if (isfirst_33032) {
add_31560(result_33035, 0, [120, 1]);
}

if (islast_33033) {
if (result_33035[0] != null) { result_33035[0].push(1); } else { result_33035[0] = [1]; };
}
else {
if (result_33035[0] != null) { result_33035[0].push(0); } else { result_33035[0] = [0]; };
}

add_31560(result_33035, 0, charsofandcompl_32958(((pixbytes_33031 != null ? pixbytes_33031.length : 0) & 0xffff)));
add_31560(result_33035, 0, pixbytes_33031);
framePtr = F.prev;
return result_33035[0];
}
function adler32_31184(data_31187) {

var result_31188 = 0;
var F={procname:"impl.adler32",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 48;
var len_31196 = (data_31187 != null ? data_31187.length : 0);
F.line = 49;
var s1_31197 = 1;
F.line = 50;
var s2_31198 = 0;
L1: do {
F.line = 51;
var i_31208 = 0;
F.line = 3632;
var i_31271 = 0;
L2: do {
F.line = 3633;
L3: while (true) {
if (!(i_31271 < len_31196)) break L3;
F.line = 3632;
i_31208 = i_31271;
F.line = 52;
s1_31197 = (((s1_31197 + data_31187[chckIndx(i_31208, 0, data_31187.length)-0]) >>> 0) % 65521);
F.line = 53;
s2_31198 = (((s2_31198 + s1_31197) >>> 0) % 65521);
i_31271 = addInt(i_31271, 1);
}
} while(false);
} while(false);
F.line = 55;
result_31188 = ((s2_31198 << 16) | s1_31197);
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_31188;
}
function initidats_33123(ihdr_33125, pixels_33127) {

var Tmp4;
var Tmp5;
var result_33129 = null;
var F={procname:"impl.initIDATs",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 177;
var exppixels_33130 = /**/[expand_32072(pixels_33127, chckRange(ihdr_33125.width, -2147483648, 2147483647), chckRange(ihdr_33125.height, -2147483648, 2147483647))];
applyfilter_32628(exppixels_33130, 0, 1);
F.line = 184;
var pixlines_33133 = flatten_32277(exppixels_33130[0]);
F.line = 187;
var reps_33144 = (Math.ceil(HEX2F_20007((pixlines_33133 != null ? pixlines_33133.length : 0), 62000))|0);
F.line = 188;
result_33129 = nimCopy(null, newseq_33158(chckRange(reps_33144, 0, 2147483647)), NTI33163);
if ((0 < reps_33144)) {
L1: do {
F.line = 192;
var i_33192 = 0;
F.line = 3632;
var i_33328 = 0;
L2: do {
F.line = 3633;
L3: while (true) {
if (!(i_33328 < reps_33144)) break L3;
F.line = 3632;
i_33192 = i_33328;
F.line = 193;
if ((i_33192 == 0)) {
Tmp4 = true;
}
else {
Tmp4 = false;
}

var isfirst_33193 = Tmp4;
F.line = 194;
if ((i_33192 == subInt(reps_33144, 1))) {
Tmp5 = true;
}
else {
Tmp5 = false;
}

var islast_33194 = Tmp5;
if (islast_33194) {
F.line = 198;
result_33129[chckIndx(i_33192, 0, result_33129.length)-0].data = nimCopy(null, compress_33028(HEX5BHEX5D_32746(pixlines_33133, HEX2EHEX2E_32736(mulInt(i_33192, 62000), subInt((pixlines_33133 != null ? pixlines_33133.length : 0), 1))), isfirst_33193, islast_33194), NTI33034);
add_31560(result_33129[chckIndx(i_33192, 0, result_33129.length)-0], "data", charsof_31337(adler32_31184(pixlines_33133)));
}
else {
F.line = 201;
result_33129[chckIndx(i_33192, 0, result_33129.length)-0].data = nimCopy(null, compress_33028(HEX5BHEX5D_32746(pixlines_33133, HEX2EHEX2E_32736(mulInt(i_33192, 62000), subInt(mulInt(addInt(i_33192, 1), 62000), 1))), isfirst_33193, islast_33194), NTI33034);
}

F.line = 203;
result_33129[chckIndx(i_33192, 0, result_33129.length)-0].typ = nimCopy(null, [73, 68, 65, 84], NTI31754);
F.line = 204;
result_33129[chckIndx(i_33192, 0, result_33129.length)-0].bytelen = ((result_33129[chckIndx(i_33192, 0, result_33129.length)-0].data != null ? result_33129[chckIndx(i_33192, 0, result_33129.length)-0].data.length : 0) >>> 0);
i_33328 = addInt(i_33328, 1);
}
} while(false);
} while(false);
}
else {
F.line = 206;
result_33129[0].data = nimCopy(null, compress_33028(pixlines_33133, true, true), NTI33034);
add_31560(result_33129[0], "data", charsof_31337(adler32_31184(pixlines_33133)));
F.line = 208;
result_33129[0].typ = nimCopy(null, [73, 68, 65, 84], NTI31754);
F.line = 209;
result_33129[0].bytelen = ((result_33129[0].data != null ? result_33129[0].data.length : 0) & 0xff);
}

framePtr = F.prev;
return result_33129;
}
function encodepng_33347(w_33349, h_33350, pixels_33352) {

var result_33354 = [null];
var F={procname:"impl.encodePng",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 217;
var ihdr_33355 = initihdr_31731(w_33349, h_33350, 8, 6, 0, 0, 0);
F.line = 218;
var iend_33356 = initiend_33331();
F.line = 219;
var idats_33357 = initidats_33123(ihdr_33355, pixels_33352);
F.line = 221;
var sihdr_33358 = serialize_31727(ihdr_33355);
F.line = 222;
var siend_33359 = serialize_31727(iend_33356);
F.line = 224;
result_33354[0] = nimCopy(null, [], NTI33375);
L1: do {
F.line = 225;
var r_33403 = 0;
F.line = 1992;
var i_33635 = 0;
if ((i_33635 <= 7)) {
L2: do {
F.line = 1994;
L3: while (true) {
if (!true) break L3;
F.line = 1995;
r_33403 = Header_31001[chckIndx(i_33635, 0, Header_31001.length)-0];
if (result_33354[0] != null) { result_33354[0].push(r_33403); } else { result_33354[0] = [r_33403]; };
if ((7 <= i_33635)) {
F.line = 1996;
break L2;
}

i_33635 = addInt(i_33635, 1);
}
} while(false);
}

} while(false);
add_31560(result_33354, 0, sihdr_33358);
L4: do {
F.line = 229;
var idat_33605 = {m_type: NTI31029, bytelen: 0, typ: null, data: null};
F.line = 3440;
var i_33639 = 0;
F.line = 3441;
var L_33641 = (idats_33357 != null ? idats_33357.length : 0);
L5: do {
F.line = 3442;
L6: while (true) {
if (!(i_33639 < L_33641)) break L6;
F.line = 3443;
idat_33605 = idats_33357[chckIndx(i_33639, 0, idats_33357.length)-0];
add_31560(result_33354, 0, serialize_31727(idat_33605));
i_33639 = addInt(i_33639, 1);
if (!(((idats_33357 != null ? idats_33357.length : 0) == L_33641))) {
failedassertimpl_20839(makeNimstrLit("len(a) == L seq modified while iterating over it"));
}

}
} while(false);
} while(false);
add_31560(result_33354, 0, siend_33359);
framePtr = F.prev;
return result_33354[0];
}
function toseqchar_37610(png_37612) {

var result_37614 = null;
var F={procname:"npng.toSeqChar",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\npng.nim",line:0};
framePtr = F;
F.line = 67;
result_37614 = nimCopy(null, encodepng_33347(png_37612.w, png_37612.h, png_37612.pixels), NTI33353);
framePtr = F.prev;
return result_37614;
}
function appendimg_37615(png_37617, toid_37618) {

var F={procname:"npng.appendImg",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\npng.nim",line:0};
framePtr = F;
F.line = 74;
var iel_37619 = document.createElement("IMG");
F.line = 75;
iel_37619.src = toJSStr((makeNimstrLit("data:image/png;base64,").slice(0,-1)).concat(encode_37622(toseqchar_37610(png_37617), 75, makeNimstrLit("\x0D\x0A"))));
if (eqStrings(toid_37618, makeNimstrLit("body"))) {
document.body.appendChild(iel_37619);
}
else {
F.line = 79;
var parent_37802 = document.getElementById(toJSStr(toid_37618));
parent_37802.appendChild(iel_37619);
}

framePtr = F.prev;
}
appendimg_37615(png_39003[0], makeNimstrLit("output"));
function seqtoptr_31407(x_31412) {

return x_31412}
function HEX3DHEX3D_31396(x_31401, y_31404) {

var result_31405 = false;
var F={procname:"==.==",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
BeforeRet: do {
if ((seqtoptr_31407(x_31401) == seqtoptr_31407(y_31404))) {
F.line = 2191;
result_31405 = true;
}
else {
if (((seqtoptr_31407(x_31401) == 0) || (seqtoptr_31407(y_31404) == 0))) {
F.line = 2193;
result_31405 = false;
}
else {
if (((x_31401 != null ? x_31401.length : 0) == (y_31404 != null ? y_31404.length : 0))) {
L1: do {
F.line = 2195;
var i_31471 = 0;
F.line = 1905;
var HEX3Atmp_31473 = 0;
F.line = 2195;
HEX3Atmp_31473 = subInt((x_31401 != null ? x_31401.length : 0), 1);
F.line = 1887;
var res_31476 = 0;
L2: do {
F.line = 1888;
L3: while (true) {
if (!(res_31476 <= HEX3Atmp_31473)) break L3;
F.line = 1889;
i_31471 = res_31476;
if (!((x_31401[chckIndx(i_31471, 0, x_31401.length)-0] == y_31404[chckIndx(i_31471, 0, y_31404.length)-0]))) {
F.line = 2196;
result_31405 = false;
break BeforeRet;
}

res_31476 = addInt(res_31476, 1);
}
} while(false);
} while(false);
F.line = 2197;
result_31405 = true;
}
}}
} while (false); 
framePtr = F.prev;
return result_31405;
}
function insertchars_31387(s_31391, s_31391_Idx, chrs_31393) {

var F={procname:"impl.insertChars",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
if (HEX3DHEX3D_31396(s_31391[s_31391_Idx], null)) {
F.line = 77;
s_31391[s_31391_Idx] = nimCopy(null, [], NTI31495);
}

L1: do {
F.line = 78;
var c_31521 = 0;
F.line = 1978;
var i_31535 = 0;
L2: do {
F.line = 1979;
L3: while (true) {
if (!(i_31535 < (chrs_31393 != null ? chrs_31393.length : 0))) break L3;
F.line = 1980;
c_31521 = chrs_31393[chckIndx(i_31535, 0, chrs_31393.length)-0];
if (s_31391[s_31391_Idx] != null) { s_31391[s_31391_Idx].push(c_31521); } else { s_31391[s_31391_Idx] = [c_31521]; };
i_31535 = addInt(i_31535, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
}
function crc32_31042(sta_31044, data_31046) {

var result_31047 = 0;
var F={procname:"impl.crc32",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 38;
var state_31048 = sta_31044;
F.line = 39;
var len_31056 = (data_31046 != null ? data_31046.length : 0);
F.line = 40;
state_31048 = ~(state_31048);
L1: do {
F.line = 41;
var i_31085 = 0;
F.line = 3632;
var i_31182 = 0;
L2: do {
F.line = 3633;
L3: while (true) {
if (!(i_31182 < len_31056)) break L3;
F.line = 3632;
i_31085 = i_31182;
L4: do {
F.line = 42;
var j_31095 = 0;
F.line = 3632;
var i_31178 = 0;
L5: do {
F.line = 3633;
L6: while (true) {
if (!(i_31178 < 8)) break L6;
F.line = 3632;
j_31095 = i_31178;
F.line = 43;
var bit_31124 = ((state_31048 ^ ((data_31046[chckIndx(i_31085, 0, data_31046.length)-0] & 0xff) >>> (j_31095 & 0xff))) & 1);
F.line = 44;
state_31048 = (((state_31048 >>> 0) >>> 1) ^ (((4294967296 - bit_31124) >>> 0) & 3988292384));
i_31178 = addInt(i_31178, 1);
}
} while(false);
} while(false);
i_31182 = addInt(i_31182, 1);
}
} while(false);
} while(false);
F.line = 45;
result_31047 = ~(state_31048);
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_31047;
}
function HEX26_31627(x_31632, y_31635) {

var result_31637 = null;
var F={procname:"&.&",prev:framePtr,filename:"c:\\dev\\nim-devel\\lib\\system.nim",line:0};
framePtr = F;
result_31637 = new Array(chckRange(addInt((x_31632 != null ? x_31632.length : 0), (y_31635 != null ? y_31635.length : 0)), 0, 2147483647)); for (var i=0;i<chckRange(addInt((x_31632 != null ? x_31632.length : 0), (y_31635 != null ? y_31635.length : 0)), 0, 2147483647);++i) {result_31637[i]=0;}L1: do {
F.line = 2152;
var i_31681 = 0;
F.line = 1905;
var HEX3Atmp_31709 = 0;
F.line = 2152;
HEX3Atmp_31709 = subInt((x_31632 != null ? x_31632.length : 0), 1);
F.line = 1887;
var res_31712 = 0;
L2: do {
F.line = 1888;
L3: while (true) {
if (!(res_31712 <= HEX3Atmp_31709)) break L3;
F.line = 1889;
i_31681 = res_31712;
F.line = 2153;
result_31637[chckIndx(i_31681, 0, result_31637.length)-0] = x_31632[chckIndx(i_31681, 0, x_31632.length)-0];
res_31712 = addInt(res_31712, 1);
}
} while(false);
} while(false);
L4: do {
F.line = 2154;
var i_31699 = 0;
F.line = 1905;
var HEX3Atmp_31717 = 0;
F.line = 2154;
HEX3Atmp_31717 = subInt((y_31635 != null ? y_31635.length : 0), 1);
F.line = 1887;
var res_31720 = 0;
L5: do {
F.line = 1888;
L6: while (true) {
if (!(res_31720 <= HEX3Atmp_31717)) break L6;
F.line = 1889;
i_31699 = res_31720;
F.line = 2155;
result_31637[chckIndx(addInt(i_31699, (x_31632 != null ? x_31632.length : 0)), 0, result_31637.length)-0] = y_31635[chckIndx(i_31699, 0, y_31635.length)-0];
res_31720 = addInt(res_31720, 1);
}
} while(false);
} while(false);
framePtr = F.prev;
return result_31637;
}
function serialize_31536(chunk_31538) {

var result_31540 = [null];
var F={procname:"impl.serialize",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
F.line = 81;
result_31540[0] = nimCopy(null, [], NTI31556);
insertchars_31387(result_31540, 0, charsof_31337(chunk_31538.bytelen));
add_31560(result_31540, 0, chunk_31538.typ);
if ((0 < (chunk_31538.data != null ? chunk_31538.data.length : 0))) {
insertchars_31387(result_31540, 0, chunk_31538.data);
insertchars_31387(result_31540, 0, charsof_31337(crc32_31042(0, HEX26_31627(chunk_31538.typ, chunk_31538.data))));
}
else {
insertchars_31387(result_31540, 0, charsof_31337(crc32_31042(0, chunk_31538.typ)));
}

framePtr = F.prev;
return result_31540[0];
}
function serialize_31727(chunk_31538) {

var result_31730 = [null];
var F={procname:"impl.serialize",prev:framePtr,filename:"c:\\users\\silvio\\documents\\dev\\nim\\npng\\private\\impl.nim",line:0};
framePtr = F;
BeforeRet: do {
F.line = 80;
result_31730[0] = serialize_31536(chunk_31538);
break BeforeRet;
} while (false); 
framePtr = F.prev;
return result_31730[0];
}
